syntax = "proto3";

package pylon.gateway.v1.workergroup;
option java_package = "bot.pylon.proto.gateway.v1.workergroup";
option java_multiple_files = true;
option go_package =
    "github.com/pylonbot/pylon-gateway-protobuf-go/gateway/v1/workergroup";

import "discord/v1/event.proto";

// Client -> Server messages
message WorkerStreamClientMessage {
  oneof payload {
    WorkerIdentifyRequest identify_request = 1;
    WorkerHeartbeatAck heartbeat_ack = 2;
    WorkerDrainRequest drain_request = 3;
  }
}

// Server -> Client messages
message WorkerStreamServerMessage {
  oneof payload {
    WorkerIdentifyResponse identify_response = 1;
    pylon.discord.v1.event.EventEnvelope event_envelope = 2;
    WorkerHeartbeatRequest heartbeat_request = 3;
    WorkerStreamClosed stream_closed = 4;
  }
}

// Identification is the first message sent
message WorkerIdentifyRequest {
  string auth_token = 1;
  string consumer_group = 2;
  string consumer_id = 3;

  string router_ticket = 4;
  uint64 last_sequence = 5;
}

// Router tickets are used for robust reconnections
message WorkerIdentifyResponse {
  string router_ticket = 1;
}

// Heartbeats are used to keep check on clients and acknowledge received events
message WorkerHeartbeatRequest {
  string nonce = 1;
}

message WorkerHeartbeatAck {
  string nonce = 1;
  uint64 sequence = 2;
}

// Clients can request to drain their connections
message WorkerDrainRequest {
  uint64 sequence = 1;
}

// The server may close the connection with a reason
message WorkerStreamClosed {
  CloseReason reason = 1;

  enum CloseReason {
    UNKNOWN = 0;
    HEARTBEAT_TIMEOUT = 1;
    INVALID_IDENTITY = 2;
    DRAIN_COMPLETE = 3;
    REQUESTED_RECONNECT = 4;
  }
}